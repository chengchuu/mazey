{"code":"/* Deal */\r\n/**\r\n * @method calLongestCommonSubstring\r\n * @description 计算两个字符串的最长公共子串\r\n * @param {String} aStr 字符串\r\n * @param {String} bStr 字符串\r\n * @return {Number} 长度\r\n */\r\nexport function calLongestCommonSubstring(aStr, bStr) {\r\n    var aLen = aStr.length;\r\n    var bLen = bStr.length;\r\n    // 创建二维数组并且深拷贝\r\n    var arr = deepCopyObject(new Array(aLen).fill(new Array(bLen).fill(0)));\r\n    for (var i = 0; i < aLen; ++i) {\r\n        for (var j = 0; j < bLen; ++j) {\r\n            if (aStr[i] === bStr[j]) {\r\n                var baseNum = 0;\r\n                if (i > 0 && j > 0) {\r\n                    baseNum = arr[i - 1][j - 1];\r\n                }\r\n                arr[i][j] = baseNum + 1;\r\n            }\r\n        }\r\n    }\r\n    // 二维数组转一维数组\r\n    var arr1 = Array.prototype.concat.apply([], arr);\r\n    // 获取最长公共子串\r\n    var maxLong = Math.max.apply(Math, arr1);\r\n    return maxLong;\r\n}\r\n/**\r\n * @method calLongestCommonSubsequence\r\n * @description 计算两个字符串的最长公共子序列\r\n * @param {String} aStr 字符串\r\n * @param {String} bStr 字符串\r\n * @return {Number} 长度\r\n */\r\nexport function calLongestCommonSubsequence(aStr, bStr) {\r\n    var aLen = aStr.length;\r\n    var bLen = bStr.length;\r\n    // 创建二维数组并且深拷贝\r\n    var arr = deepCopyObject(new Array(aLen).fill(new Array(bLen).fill(0)));\r\n    for (var i = 0; i < aLen; ++i) {\r\n        for (var j = 0; j < bLen; ++j) {\r\n            if (aStr[i] === bStr[j]) {\r\n                var baseNum = 0;\r\n                if (i > 0 && j > 0) {\r\n                    baseNum = arr[i - 1][j - 1];\r\n                }\r\n                arr[i][j] = baseNum + 1;\r\n            }\r\n            else {\r\n                var _a = [0, 0], leftValue = _a[0], topValue = _a[1];\r\n                if (j > 0) {\r\n                    leftValue = arr[i][j - 1];\r\n                }\r\n                if (i > 0) {\r\n                    topValue = arr[i - 1][j];\r\n                }\r\n                arr[i][j] = Math.max(leftValue, topValue);\r\n            }\r\n        }\r\n    }\r\n    // 二维数组转一维数组\r\n    var arr1 = Array.prototype.concat.apply([], arr);\r\n    // 获取最长公共子串\r\n    var maxLong = Math.max.apply(Math, arr1);\r\n    return maxLong;\r\n}\r\n/**\r\n * @method calLongestCommonSubSequence\r\n * @description 向前兼容，calLongestCommonSubsequence 的别名\r\n */\r\nexport function calLongestCommonSubSequence(aStr, bStr) {\r\n    return calLongestCommonSubsequence(aStr, bStr);\r\n}\r\n/**\r\n * @method join\r\n * @description 将一系列值连接成固定字符分隔的字符串 123,456 => 123 - 456。\r\n * @param {String} joinStr 连接值的字符串。\r\n * @param {Rest} ...rest 需要连接的值 。\r\n * */\r\nexport function join(joinStr) {\r\n    var rest = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        rest[_i - 1] = arguments[_i];\r\n    }\r\n    var _a = ['', joinStr.length], ret = _a[0], len = _a[1];\r\n    for (var _b = 0, rest_1 = rest; _b < rest_1.length; _b++) {\r\n        var v = rest_1[_b];\r\n        if (v) {\r\n            ret += \"\" + joinStr + v;\r\n        }\r\n    }\r\n    if (ret) {\r\n        ret = ret.substring(len);\r\n    }\r\n    return ret;\r\n}\r\n/**\r\n * @method renderTable\r\n * @description 渲染表格\r\n * @param {DOM Object} tbID\r\n * @param {Array} data\r\n * @param {Array} property\r\n */\r\nexport function renderTable(tbID, data, property) {\r\n    if (tbID === void 0) { tbID = null; }\r\n    if (data === void 0) { data = []; }\r\n    if (property === void 0) { property = []; }\r\n    var TBODY = document.querySelector(\"#\" + tbID + \" tbody\");\r\n    function mNullToNA(str) {\r\n        return str === null ? 'N.A.' : str;\r\n    }\r\n    ;\r\n    var content = '';\r\n    TBODY.innerHTML = '';\r\n    // 无数据\r\n    if (!data.length) {\r\n        content = \"<tr><td colspan=\\\"\" + property.length + \"\\\">\\u65E0\\u6570\\u636E</td></tr>\";\r\n    }\r\n    else {\r\n        for (var _a = [0, data.length], i = _a[0], max = _a[1]; i < max; ++i) {\r\n            var item = data[i];\r\n            content += '<tr>';\r\n            for (var _b = [0, property.length], i_1 = _b[0], max_1 = _b[1]; i_1 < max_1; ++i_1) {\r\n                content += \"<td>\" + mNullToNA(item[property[i_1]]) + \"</td>\";\r\n            }\r\n            content += '</tr>';\r\n        }\r\n    }\r\n    TBODY.innerHTML = content;\r\n}\r\n/**\r\n * @method getHashQueryParam\r\n * @description 获取地址栏 hash 后面的参数。\r\n * @param {String} param 获取参数的名字。\r\n */\r\nexport function getHashQueryParam(param) {\r\n    var hashs = window.location.hash.split('?');\r\n    if (hashs.length === 1) {\r\n        return null;\r\n    }\r\n    var reg = new RegExp(\"(^|&)\" + param + \"=([^&]*)(&|$)\");\r\n    var ret = hashs[1].match(reg);\r\n    return ret ? ret[2] : null;\r\n}\r\n/**\r\n * @method camelCaseToKebabCase\r\n * @description 驼峰转连接线。\r\n * @param {String} camelCase\r\n * */\r\nexport function camelCaseToKebabCase(camelCase) {\r\n    var kebabCase = camelCase.replace(/([A-Z])/g, '-$1').toLowerCase();\r\n    return kebabCase[0] === '-' ? kebabCase.substr(1) : kebabCase;\r\n}\r\n/**\r\n * @method getDomain\r\n * @description 获取地址中的域名（及其他参数）。\r\n * @param {String} url\r\n * @param {Array} rules ['hostname', 'pathname'] = 'km.mazey.net/plugins/servlet/mobile'\r\n * */\r\nexport function getDomain(_a) {\r\n    var _b = _a === void 0 ? {} : _a, _c = _b.url, url = _c === void 0 ? '' : _c, _d = _b.rules, rules = _d === void 0 ? ['hostname'] : _d;\r\n    var aEl = document.createElement('a');\r\n    aEl.href = url;\r\n    return rules.reduce(function (ret, v, index) {\r\n        ret += aEl[v];\r\n        return ret;\r\n    }, '');\r\n}\r\n/**\r\n * @method trim\r\n * @description 去除左右空格。\r\n * @param {String} str 需要去除两边空格的字符串。\r\n * */\r\nexport function trim(str) {\r\n    str = str.replace(/^\\s+/, ''); // 去除头部空格\r\n    var _a = [str.length - 1, /\\s/], end = _a[0], ws = _a[1];\r\n    while (ws.test(str.charAt(end))) {\r\n        end--; // 最后一个非空格字符的索引\r\n    }\r\n    return str.slice(0, end + 1);\r\n}\r\n/**\r\n * @method newLine\r\n * @description html换行。\r\n * @param {String} str\r\n * */\r\nexport function newLine(str) {\r\n    if (!str) {\r\n        return '';\r\n    }\r\n    var reg = new RegExp('\\\\n', 'g');\r\n    return str.replace(reg, '<br />');\r\n}\r\n/**\r\n * @method deepCopyObject\r\n * @description 对象深拷贝。\r\n * @param {Object} obj 被拷贝的对象。\r\n * @return {Object}\r\n * */\r\nexport function deepCopyObject(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n/**\r\n * @method generateRndNum\r\n * @description 生成随机数 mGenerateRndNum(7) => 7658495。\r\n * @param {Number} n 随机数的长度\r\n * @return {String}\r\n * */\r\nexport function generateRndNum(n) {\r\n    var ret = '';\r\n    while (n--) {\r\n        ret += Math.floor(Math.random() * 10);\r\n    }\r\n    return ret;\r\n}\r\n/**\r\n * @method generateUniqueNum\r\n * @description 根据时间生成唯一标志的数字 mGenerateUniqueNum() => 1538324722364123。\r\n * @param {Number} n 随机数的长度\r\n * */\r\nexport function generateUniqueNum(n) {\r\n    var _a = [mNow(), generateRndNum(n || 3)], now = _a[0], rnd = _a[1];\r\n    return now + rnd;\r\n}\r\n/**\r\n * @method resetForm\r\n * @description 重置表单输入值为原始（空）状态。\r\n * @param {String} rest name1,name2,name3...NAME属性，可以多个。\r\n * */\r\nexport function resetForm() {\r\n    var rest = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        rest[_i] = arguments[_i];\r\n    }\r\n    for (var i = 0; i < rest.length; i++) {\r\n        var tagMz = document.getElementsByName(rest[i])[0]; // tag object\r\n        var tagNameMz = tagMz.tagName.toLowerCase(); // tag name\r\n        if (tagNameMz === 'input') {\r\n            tagMz.value = '';\r\n        }\r\n        else if (tagNameMz === 'select') {\r\n            tagMz.options[0].selected = true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @method floatToPercent\r\n * @description 浮点数转为百分比 0.2 => 20%。\r\n * @param {Number} 浮点数。\r\n * */\r\nexport function floatToPercent(num, isFix) {\r\n    if (isFix) {\r\n        num = (num * 100).toFixed(isFix);\r\n    }\r\n    else {\r\n        num = Math.floor(num * 100);\r\n    }\r\n    return num + \"%\";\r\n}\r\n/**\r\n * @method floatFixed\r\n * @description 浮点数保留指定位。\r\n * */\r\nexport function floatFixed(num, size) {\r\n    return parseFloat(num).toFixed(size);\r\n}\r\n/**\r\n * @method compatibleExist\r\n * @description 不存在返回 ——。\r\n * */\r\nexport function compatibleExist(instance, replaceStr) {\r\n    var ret = '';\r\n    try {\r\n        ret = instance || replaceStr || '——';\r\n    }\r\n    catch (e) {\r\n        ret = '——';\r\n    }\r\n    return ret;\r\n}\r\n/**\r\n * @method cancelBubble\r\n * @description 阻止冒泡。\r\n * */\r\nexport function cancelBubble(e) {\r\n    var ev = e || window.event;\r\n    if (ev.stopPropagation) {\r\n        // W3C\r\n        ev.stopPropagation();\r\n    }\r\n    else {\r\n        // IE\r\n        ev.cancelBubble = true;\r\n    }\r\n}\r\n/**\r\n * @method hasClass\r\n * */\r\nexport function hasClass(obj, cls) {\r\n    var oriCls = obj.className; // 获取对象的class值\r\n    var oriClsArr = oriCls.split(/\\s+/); // 分隔空格转换成数组\r\n    for (var i = 0; i < oriClsArr.length; i++) {\r\n        if (oriClsArr[i] === cls) {\r\n            return true; // 若匹配到class则返回True\r\n        }\r\n    }\r\n    return false; // 否则返回False\r\n}\r\n/**\r\n * @method addClass\r\n * */\r\nexport function addClass(obj, cls) {\r\n    var oriCls = obj.className;\r\n    var space = '';\r\n    var newCls = ''; // 获取对象的class值\r\n    if (oriCls !== '') {\r\n        space = ' '; // 若原来的class不为空，跟一个空格\r\n    }\r\n    newCls = oriCls + space + cls; // 将新的class加进去\r\n    obj.className = newCls; // 替换新class\r\n}\r\n/**\r\n * @method removeClass\r\n * */\r\nexport function removeClass(obj, cls) {\r\n    var oriCls = obj.className;\r\n    var newCls; // 获取对象的class值\r\n    newCls = ' ' + oriCls + ' '; // 前后加空格\r\n    newCls = newCls.replace(/(\\s+)/gi, ' '); // 将多余的空格替换成一个空格\r\n    newCls = newCls.replace(' ' + cls + ' ', ' '); // 将加了前后空格的cls替换成空格' '\r\n    newCls = newCls.replace(/(^\\s+)|(\\s+$)/g, ''); // 去掉前后空格\r\n    obj.className = newCls;\r\n}\r\n/**\r\n * @method throttle\r\n * @description 节流。\r\n * */\r\nexport function throttle(func, wait, options) {\r\n    // timeout: setTimeout Handle\r\n    // previous: 上次时间戳\r\n    var context = null;\r\n    var args = null;\r\n    var _a = [null, null, 0], result = _a[0], timeout = _a[1], previous = _a[2];\r\n    if (!options) {\r\n        options = {};\r\n    }\r\n    var later = function () {\r\n        previous = options.leading === false ? 0 : mNow();\r\n        timeout = null;\r\n        result = func.apply(context, args);\r\n        if (!timeout) {\r\n            context = args = null;\r\n        }\r\n    };\r\n    return function () {\r\n        var now = mNow();\r\n        if (!previous && options.leading === false) {\r\n            previous = now;\r\n        }\r\n        var remaining = wait - (now - previous);\r\n        context = this;\r\n        args = arguments;\r\n        if (remaining <= 0 || remaining > wait) {\r\n            if (timeout) {\r\n                clearTimeout(timeout);\r\n                timeout = null;\r\n            }\r\n            previous = now;\r\n            result = func.apply(context, args);\r\n            if (!timeout) {\r\n                context = args = null;\r\n            }\r\n        }\r\n        else if (!timeout && options.trailing !== false) {\r\n            timeout = setTimeout(later, remaining);\r\n        }\r\n        return result;\r\n    };\r\n}\r\n/**\r\n * @method debounce\r\n * @description 去抖。\r\n * */\r\nexport function debounce(func, wait, immediate) {\r\n    var context = null;\r\n    var _a = [null, null, null, null], timeout = _a[0], args = _a[1], timestamp = _a[2], result = _a[3];\r\n    var later = function () {\r\n        var last = mNow() - timestamp;\r\n        if (last < wait && last >= 0) {\r\n            timeout = setTimeout(later, wait - last);\r\n        }\r\n        else {\r\n            timeout = null;\r\n            if (!immediate) {\r\n                result = func.apply(context, args);\r\n                if (!timeout) {\r\n                    context = args = null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return function () {\r\n        context = this;\r\n        args = arguments;\r\n        timestamp = mNow();\r\n        var callNow = immediate && !timeout;\r\n        if (!timeout) {\r\n            timeout = setTimeout(later, wait);\r\n        }\r\n        if (callNow) {\r\n            result = func.apply(context, args);\r\n            context = args = null;\r\n        }\r\n        return result;\r\n    };\r\n}\r\n/**\r\n * @method friendlyInterval\r\n * @description 获取间隔时间。\r\n * @param {Number/Date} start 开始时间戳 1585325367122\r\n * @param {Number/Date} end 结束时间戳 1585325367122\r\n * @type {String} type 返回类型 d: 2(天) text: 2 天 4 时...\r\n * @return {String/Number} 取决于 type\r\n * */\r\nexport function friendlyInterval(_a) {\r\n    var _b = _a === void 0 ? {} : _a, _c = _b.start, start = _c === void 0 ? 0 : _c, _d = _b.end, end = _d === void 0 ? 0 : _d, _e = _b.type, type = _e === void 0 ? 'd' : _e;\r\n    if (!isNumber(start))\r\n        start = new Date(start).getTime();\r\n    if (!isNumber(end))\r\n        end = new Date(end).getTime();\r\n    var t = end - start;\r\n    var ret = null;\r\n    var _f = new Array(4).fill(0), d = _f[0], h = _f[1], m = _f[2], s = _f[3];\r\n    if (t >= 0) {\r\n        d = Math.floor(t / 1000 / 60 / 60 / 24);\r\n        h = Math.floor(t / 1000 / 60 / 60);\r\n        m = Math.floor(t / 1000 / 60);\r\n        s = Math.floor(t / 1000);\r\n        switch (type) {\r\n            case 'd':\r\n                ret = d;\r\n                break;\r\n            case 'text':\r\n                d = Math.floor(t / 1000 / 60 / 60 / 24);\r\n                h = Math.floor((t / 1000 / 60 / 60) % 24);\r\n                m = Math.floor((t / 1000 / 60) % 60);\r\n                s = Math.floor((t / 1000) % 60);\r\n                ret = d + ' 天 ' + h + ' 时 ' + m + ' 分 ' + s + ' 秒';\r\n                break;\r\n            default:\r\n                ret = s;\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n/**\r\n * @method isNumber\r\n * @description 判断是否数字\r\n * @param {Any} 被判断的值\r\n * @return {Boolean} true 是数字\r\n */\r\nexport function isNumber(v) {\r\n    return typeof v === 'number' && isFinite(v);\r\n}\r\n/**\r\n * @method updateQueryStringParameter\r\n * @description 替换或添加地址栏参数。\r\n * */\r\nexport function updateQueryStringParameter(uri, key, value) {\r\n    var re = new RegExp('([?&])' + key + '=.*?(&|$)', 'i');\r\n    var separator = uri.indexOf('?') !== -1 ? '&' : '?';\r\n    if (uri.match(re)) {\r\n        return uri.replace(re, '$1' + key + '=' + value + '$2');\r\n    }\r\n    else {\r\n        return uri + separator + key + '=' + value;\r\n    }\r\n}\r\n/**\r\n * @method isJsonString\r\n * @description 判断是否合法 JSON 字符串。\r\n * */\r\nexport function isJsonString(str) {\r\n    try {\r\n        if (typeof JSON.parse(str) === 'object') {\r\n            return true;\r\n        }\r\n    }\r\n    catch (e) { }\r\n    return false;\r\n}\r\n/**\r\n * @method getUrlParam\r\n * @description 链接参数。\r\n * */\r\nexport function getUrlParam(sUrl, sKey) {\r\n    var result = {};\r\n    sUrl.replace(/\\??(\\w+)=(\\w+)&?/g, function (a, k, v) {\r\n        if (result[k] !== undefined) {\r\n            var t = result[k];\r\n            result[k] = [].concat(t, v);\r\n        }\r\n        else {\r\n            result[k] = v;\r\n        }\r\n    });\r\n    if (sKey === undefined) {\r\n        return result;\r\n    }\r\n    else {\r\n        return result[sKey] || '';\r\n    }\r\n}\r\n/**\r\n * @method getSearchQueryParam\r\n * @description 地址栏参数。\r\n * */\r\nexport function getSearchQueryParam(name) {\r\n    var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)');\r\n    var r = window.location.search.substr(1).match(reg);\r\n    if (r != null) {\r\n        return decodeURIComponent(unescape(r[2]));\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @method getQueryParam\r\n * @description 地址栏参数，getSearchQueryParam 的别名。\r\n * */\r\nexport function getQueryParam(name) {\r\n    return getSearchQueryParam(name);\r\n}\r\n/**\r\n * @method doFn\r\n * @description 执行有效函数\r\n * @param {Function} fn 等待被执行的未知是否有效的函数\r\n * */\r\nexport function doFn(fn) {\r\n    var ret = null;\r\n    if (fn && typeof fn === 'function') {\r\n        ret = fn();\r\n    }\r\n    return ret;\r\n}\r\n/**\r\n * @method setSessionStorage\r\n * @description 存储数据到 sessionStorage\r\n * @param {String} key 键\r\n * @param {String} value 值\r\n * */\r\nexport function setSessionStorage(key, value) {\r\n    if (value === void 0) { value = null; }\r\n    if (key) {\r\n        sessionStorage.setItem(key, JSON.stringify(value));\r\n    }\r\n}\r\n/**\r\n * @method getSessionStorage\r\n * @description 存储数据到 sessionStorage\r\n * @param {String} key 键\r\n * @param {String} value 值\r\n * @return {Any} 返回值\r\n * */\r\nexport function getSessionStorage(key) {\r\n    var ret = null;\r\n    if (key) {\r\n        var value = sessionStorage.getItem(key);\r\n        if (value) {\r\n            ret = JSON.parse(value);\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n/**\r\n * @method setLocalStorage\r\n * @description 存储数据到 localStorage\r\n * @param {String} key 键\r\n * @param {String} value 值\r\n * */\r\nexport function setLocalStorage(key, value) {\r\n    if (value === void 0) { value = null; }\r\n    if (key) {\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n    }\r\n}\r\n/**\r\n * @method getLocalStorage\r\n * @description 存储数据到 localStorage\r\n * @param {String} key 键\r\n * @param {String} value 值\r\n * @return {Any} 返回值\r\n * */\r\nexport function getLocalStorage(key) {\r\n    var ret = null;\r\n    if (key) {\r\n        var value = localStorage.getItem(key);\r\n        if (value) {\r\n            ret = JSON.parse(value);\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n/*\r\n * @method loadCSS\r\n * @description 动态加载css文件\r\n * @param {String} url -- css资源路径\r\n * @param {Function} callback -- 加载后回调函数\r\n * @param {String} id -- link标签id\r\n */\r\nexport function loadCSS(_a) {\r\n    var string = _a.url, any = _a.callback, id = _a.id;\r\n    callback = typeof callback === 'function' ? callback : function () { };\r\n    var node = document.createElement('link');\r\n    var supportOnload = 'onload' in node;\r\n    var isOldWebKit = +navigator.userAgent.replace(/.*(?:AppleWebKit|AndroidWebKit)\\/?(\\d+).*/i, '$1') < 536; // webkit旧内核做特殊处理\r\n    var protectNum = 300000; // 阈值10分钟，一秒钟执行pollCss 500次\r\n    node.rel = 'stylesheet';\r\n    node.type = 'text/css';\r\n    node.href = url;\r\n    if (typeof id !== 'undefined') {\r\n        node.id = id;\r\n    }\r\n    document.getElementsByTagName('head')[0].appendChild(node);\r\n    // for Old WebKit and Old Firefox\r\n    if (isOldWebKit || !supportOnload) {\r\n        // Begin after node insertion\r\n        setTimeout(function () {\r\n            pollCss(node, callback, 0);\r\n        }, 1);\r\n        return;\r\n    }\r\n    if (supportOnload) {\r\n        node.onload = onload;\r\n        node.onerror = function () {\r\n            // 加载失败(404)\r\n            onload();\r\n        };\r\n    }\r\n    else {\r\n        // todo: 和 !supportOnload 重复\r\n        node.onreadystatechange = function () {\r\n            if (/loaded|complete/.test(node.readyState)) {\r\n                onload();\r\n            }\r\n        };\r\n    }\r\n    function onload() {\r\n        // 确保只跑一次下载操作\r\n        node.onload = node.onerror = node.onreadystatechange = null;\r\n        // 清空node引用，在低版本IE，不清除会造成内存泄露\r\n        node = null;\r\n        callback();\r\n    }\r\n    // 循环判断css是否已加载成功\r\n    /*\r\n     * @param node -- link节点\r\n     * @param callback -- 回调函数\r\n     * @param step -- 计步器，避免无限循环\r\n     */\r\n    function pollCss(node, callback, step) {\r\n        var sheet = node.sheet;\r\n        var isLoaded;\r\n        step += 1;\r\n        // 保护，大于10分钟，则不再轮询\r\n        if (step > protectNum) {\r\n            isLoaded = true;\r\n            // 清空node引用\r\n            node = null;\r\n            callback();\r\n            return;\r\n        }\r\n        if (isOldWebKit) {\r\n            // for WebKit < 536\r\n            if (sheet) {\r\n                isLoaded = true;\r\n            }\r\n        }\r\n        else if (sheet) {\r\n            // for Firefox < 9.0\r\n            try {\r\n                if (sheet.cssRules) {\r\n                    isLoaded = true;\r\n                }\r\n            }\r\n            catch (ex) {\r\n                // 火狐特殊版本，通过特定值获知是否下载成功\r\n                // The value of `ex.name` is changed from \"NS_ERROR_DOM_SECURITY_ERR\"\r\n                // to \"SecurityError\" since Firefox 13.0. But Firefox is less than 9.0\r\n                // in here, So it is ok to just rely on \"NS_ERROR_DOM_SECURITY_ERR\"\r\n                if (ex.name === 'NS_ERROR_DOM_SECURITY_ERR') {\r\n                    isLoaded = true;\r\n                }\r\n            }\r\n        }\r\n        setTimeout(function () {\r\n            if (isLoaded) {\r\n                // 延迟20ms是为了给下载的样式留够渲染的时间\r\n                callback();\r\n            }\r\n            else {\r\n                pollCss(node, callback, step);\r\n            }\r\n        }, 20);\r\n    }\r\n}\r\n/*\r\n * @method loadScript\r\n * @description 动态加载js文件\r\n * @param {String} url -- js资源路径\r\n * @param {Function} callback -- 加载后回调函数\r\n */\r\nexport function loadScript(_a) {\r\n    var string = _a.url, any = _a.callback;\r\n    var script = document.createElement('script');\r\n    // 如果没有 script 标签，那么代码就不会运行。可以利用这一事实，在页面的第一个 script 标签上使用 insertBefore()。\r\n    var firstScript = document.getElementsByTagName('script')[0];\r\n    script.type = 'text/javascript';\r\n    if (script.readyState) {\r\n        // IE\r\n        script.onreadystatechange = function () {\r\n            if (script.readyState === 'loaded' || script.readyState === 'complete') {\r\n                script.onreadystatechange = null;\r\n                doFn(callback);\r\n            }\r\n        };\r\n    }\r\n    else {\r\n        // Others\r\n        script.onload = function () {\r\n            doFn(callback);\r\n        };\r\n    }\r\n    script.src = url;\r\n    firstScript && firstScript.parentNode.insertBefore(script, firstScript);\r\n}\r\n/*\r\n * @method mNow\r\n * @description 获取时间戳\r\n */\r\nexport function mNow() {\r\n    var ret = 0;\r\n    if (Date.now) {\r\n        ret = Date.now();\r\n    }\r\n    else {\r\n        ret = new Date().getTime();\r\n    }\r\n    return ret;\r\n}\r\n","references":[]}
